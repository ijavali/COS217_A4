Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Jack Zhang

------------------------------------------------------------------------
Student 2: What is your name?

Ishaan Javali

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
For each of the five faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insert
---------------------------------------------------------------
         ./bdtBad2        BDT_freeSubtree
---------------------------------------------------------------
         ./bdtBad3        BDT_traversePath
---------------------------------------------------------------
         ./bdtBad4        BDT_strlenAccumulate
---------------------------------------------------------------
         ./bdtBad5        BDT_rm
===============================================================

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

<<<<<<< HEAD
The usage of global variables in dtGood is not effective encapsulation in modular coding, 
since those global variables are accessed throughout multiple methods within dtGood.
While functional, DT_traversePath and DT_insert are cumbersome and bloated. For example, DT_insert 
could be rewritten such that just a single traversal is used to create the new path 
to the new node (i.e. building each depth level is not necessary). 

The code succeeds in that it is consistent - each function is named with Node or
DT as a prefix, and each function name is abundantly representative of what it does. 
Exceptions are BDT_strlenAccumulate and BDT_strcatAccumulate, which were named vaguely.
Furthermore, the distribution of resource management between the client and dtGood
is effective because dtGood allocates and frees the string representation
of the tree as well as internal node/path creation/destruction,
whereas the client allocates and frees the entire directory tree. We 
also believe that the interface is relatively concise - all the .h functions
and helper functions have a clear reason for existing. While DT_contains
and DT_findNode seem a bit redundant in functionality, DT_findNode requires a dummy variable
to pass in a found node, so only using DT_findNode when checking if a directory tree
contains a node would not only be confusing in meaning, but would also clutter up a method
with more dummy variables. After the implementation of our checkerDT.c, the error checking between the client and our checker is sufficient.
The code also establishes contracts in that it is commented very clearly, with
each parameter of each method having a clear meaning. Both the dt and nodeDT
files have strong cohesion because each method is relevant only to the entire tree
or individual nodes, respectively. Finally, the code is weakly coupled among
modules because Node methods are only called in DT during traversals and freeing,
which all require using a method involving a singular, individual node. This 
is a good thing because errors in, for example, nodeDT won't amplify as much in DT. 
It is also easier to maintain, because mistakes between files can be traced back
to just a few cross-module method calls.
=======

>>>>>>> 9426a14f54365e79d32f9ce80113dc468fd242a8

------------------------------------------------------------------------