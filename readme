Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Jack Zhang

------------------------------------------------------------------------
Student 2: What is your name?

Ishaan Javali

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

Lecture Notes and Precept Notes, the course's website, 
the course's textbooks (King and The Practice of Programming), 
the Intro COS Lab TA's,
and the course's current staff members outside of class time through office hours.

------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

Lecture Notes and Precept Notes, the course's website, 
the course's textbooks (King and The Practice of Programming), 
the Intro COS Lab TA's,
and the course's current staff members outside of class time through office hours.

------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

The assignment was helpful because I learned a lot about modularity
and recursive methods. I particularly enjoyed the 2nd part of the assignment
because I had to determine which built-in methods I could use, and which
ones I had to basically reconstruct for my checker. However,
I honestly thought that part 1 did nothing to help me learn debugging,
and it felt like I had wasted time.

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

path.h:24:5: Function Path_new declared but not defined
  A function or variable is declared, but not defined in any source code file.
  (Use -declundef to inhibit warning)
path.h:33:5: Function Path_dup declared but not defined
path.h:44:5: Function Path_prefix declared but not defined
path.h:47:6: Function Path_free declared but not defined
path.h:50:13: Function Path_getPathname declared but not defined
path.h:56:8: Function Path_getStrLength declared but not defined
path.h:63:5: Function Path_comparePath declared but not defined
path.h:70:5: Function Path_compareString declared but not defined
path.h:77:8: Function Path_getDepth declared but not defined
path.h:86:8: Function Path_getSharedPrefixDepth declared but not defined
path.h:94:13: Function Path_getComponent declared but not defined
nodeDT.h:29:5: Function Node_new declared but not defined
nodeDT.h:36:8: Function Node_free declared but not defined
nodeDT.h:39:8: Function Node_getPath declared but not defined
nodeDT.h:50:9: Function Node_hasChild declared but not defined
nodeDT.h:54:8: Function Node_getNumChildren declared but not defined
nodeDT.h:62:5: Function Node_getChild declared but not defined
nodeDT.h:69:8: Function Node_getParent declared but not defined
nodeDT.h:76:5: Function Node_compare declared but not defined
nodeDT.h:85:7: Function Node_toString declared but not defined
dynarray.h:21:12: Function DynArray_new declared but not defined
dynarray.h:27:6: Function DynArray_free declared but not defined
dynarray.h:33:8: Function DynArray_getLength declared but not defined
dynarray.h:39:7: Function DynArray_get declared but not defined
dynarray.h:46:7: Function DynArray_set declared but not defined
dynarray.h:55:5: Function DynArray_add declared but not defined
dynarray.h:63:5: Function DynArray_addAt declared but not defined
dynarray.h:70:7: Function DynArray_removeAt declared but not defined
dynarray.h:78:6: Function DynArray_toArray declared but not defined
dynarray.h:87:26: Function DynArray_map declared but not defined
dynarray.h:98:26: Function DynArray_sort declared but not defined
dynarray.h:113:27: Function DynArray_search declared but not defined
dynarray.h:129:28: Function DynArray_bsearch declared but not defined
checkerDT.h:16:9: Function exported but not used outside checkerDT:
                     CheckerDT_Node_isValid
  A declaration is exported, but not used outside this module. Declaration can
  use static qualifier. (Use -exportlocal to inhibit warning)
   checkerDT.c:94:1: Definition of CheckerDT_Node_isValid

Finished checking --- 34 code warnings

All of these errors result from our abstract encapsulation of code, meaning that
different modules can't access the implementations of methods from others. This
is adherent to the principles of good modular coding.


------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
For each of the five faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insert
---------------------------------------------------------------
         ./bdtBad2        BDT_freeSubtree
---------------------------------------------------------------
         ./bdtBad3        BDT_addChild
---------------------------------------------------------------
         ./bdtBad4        BDT_strlenAccumulate
---------------------------------------------------------------
         ./bdtBad5        BDT_rm
===============================================================

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

The usage of global variables in dtGood is not effective encapsulation in modular coding, 
since those global variables are accessed throughout multiple methods within dtGood.
While functional, DT_traversePath and DT_insert appear cumbersome and bloated. However,
due to internal comments, they are still clear in their purpose, and each step in their
iterated loops is logical. bIsInitialized could be renamed to bTreeIsInitialized
for clarity, and oNCurr and oNChild used in DT_traversePath are unclear variable names. ulCount could
also be renamed to ulNumNodes, for further clarity, and oNFirstNew is named poorly in DT_insert.

The code succeeds in that it is consistent - each function is named with Node or
DT as a prefix, and each function name is abundantly representative of what it does. 
Exceptions are BDT_strlenAccumulate and BDT_strcatAccumulate, which were named vaguely.
Furthermore, the distribution of resource management between the client and dtGood
is effective because dtGood allocates and frees the string representation
of the tree as well as internal node/path creation/destruction,
whereas the client allocates and frees the entire directory tree. We 
also believe that the interface is relatively concise - all the .h functions
and helper functions have a clear reason for existing. While DT_contains
and DT_findNode seem a bit redundant in functionality, DT_findNode requires a dummy variable
to pass in a found node, so only using DT_findNode when checking if a directory tree
contains a node would not only be confusing in meaning, but would also clutter up a method
with more dummy variables. After the implementation of our checkerDT.c, the error checking between 
the client and our checker is sufficient.

The code also establishes contracts in that it is commented very clearly, with
each parameter of each method having a clear meaning. Both the dt and nodeDT
files have strong cohesion because each method is relevant only to the entire tree
or individual nodes, respectively. Finally, the code is weakly coupled among
modules because Node methods are only called in DT during traversals and freeing,
which all require using a method involving a singular, individual node. This 
is a good thing because errors in, for example, nodeDT won't amplify as much in DT. 
It is also easier to maintain, because mistakes between files can be traced back
to just a few cross-module method calls.
